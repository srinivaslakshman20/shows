/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.xyz.shows.management.api;

import com.xyz.shows.management.model.CreateShowRequest;
import com.xyz.shows.management.model.Error;
import com.xyz.shows.management.model.Show;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Api(value = "shows", description = "the shows API")
public interface ShowsApi {

    Logger log = LoggerFactory.getLogger(ShowsApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Add a new show", nickname = "addNewShow", notes = "", response = Show.class, tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = Show.class) })
    @RequestMapping(value = "/shows/{cinemaId}/{screenId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Show> addNewShow(@ApiParam(value = "Show that needs to be added to the inventory" ,required=true )  @Valid @RequestBody CreateShowRequest body
,@ApiParam(value = "Id of a screen",required=true) @PathVariable("screenId") Long screenId
,@ApiParam(value = "Id of a Cinema",required=true) @PathVariable("cinemaId") Long cinemaId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"showId\" : 456,\r\n  \"theater\" : {\r\n    \"zip\" : \"560001\",\r\n    \"address2\" : \"R Block\",\r\n    \"city\" : \"Bangalore\",\r\n    \"phone\" : \"12245-67890\",\r\n    \"screens\" : [ {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    }, {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    } ],\r\n    \"address1\" : \"100 abc road\",\r\n    \"name\" : \"PVR Cinemas\",\r\n    \"description\" : \"PVR Cinemas in bangalore\",\r\n    \"id\" : 501,\r\n    \"state\" : \"Karnataka\",\r\n    \"category\" : \"Multiplex\"\r\n  },\r\n  \"showTotalPrice\" : 250,\r\n  \"discountedTotalPrice\" : 225,\r\n  \"showTime\" : \"2021-09-17 08:45:00.000\",\r\n  \"cinema\" : {\r\n    \"languages\" : \"English, Hindi\",\r\n    \"name\" : \"Fast and Furious 6\",\r\n    \"castMembers\" : \"Paul Walker, Vin Diesel, Michelle Rodriguez\",\r\n    \"genre\" : \"Action\",\r\n    \"description\" : \"Hobbs is tasked with catching a team of mercenary drivers who manage to evade him every time.\",\r\n    \"id\" : 345,\r\n    \"durationInMins\" : 112\r\n  },\r\n  \"showOffers\" : [ {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  }, {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  } ]\r\n}", Show.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ShowsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update the show details", nickname = "deleteShow", notes = "", response = Show.class, tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = Show.class),
        @ApiResponse(code = 400, message = "Invalid parameters supplied", response = Error.class) })
    @RequestMapping(value = "/shows/{showId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Show> deleteShow(@ApiParam(value = "Id of a Show",required=true) @PathVariable("showId") String showId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"showId\" : 456,\r\n  \"theater\" : {\r\n    \"zip\" : \"560001\",\r\n    \"address2\" : \"R Block\",\r\n    \"city\" : \"Bangalore\",\r\n    \"phone\" : \"12245-67890\",\r\n    \"screens\" : [ {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    }, {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    } ],\r\n    \"address1\" : \"100 abc road\",\r\n    \"name\" : \"PVR Cinemas\",\r\n    \"description\" : \"PVR Cinemas in bangalore\",\r\n    \"id\" : 501,\r\n    \"state\" : \"Karnataka\",\r\n    \"category\" : \"Multiplex\"\r\n  },\r\n  \"showTotalPrice\" : 250,\r\n  \"discountedTotalPrice\" : 225,\r\n  \"showTime\" : \"2021-09-17 08:45:00.000\",\r\n  \"cinema\" : {\r\n    \"languages\" : \"English, Hindi\",\r\n    \"name\" : \"Fast and Furious 6\",\r\n    \"castMembers\" : \"Paul Walker, Vin Diesel, Michelle Rodriguez\",\r\n    \"genre\" : \"Action\",\r\n    \"description\" : \"Hobbs is tasked with catching a team of mercenary drivers who manage to evade him every time.\",\r\n    \"id\" : 345,\r\n    \"durationInMins\" : 112\r\n  },\r\n  \"showOffers\" : [ {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  }, {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  } ]\r\n}", Show.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ShowsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get Description of a show including price, timings", nickname = "getShowPerShowId", notes = "", response = Show.class, tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success output", response = Show.class),
        @ApiResponse(code = 400, message = "Invalid parameters supplied", response = Error.class) })
    @RequestMapping(value = "/shows/{showId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Show> getShowPerShowId(@ApiParam(value = "Id of a Show",required=true) @PathVariable("showId") Long showId
,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "numberOfTicketsReqd", required = true) Long numberOfTicketsReqd
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"showId\" : 456,\r\n  \"theater\" : {\r\n    \"zip\" : \"560001\",\r\n    \"address2\" : \"R Block\",\r\n    \"city\" : \"Bangalore\",\r\n    \"phone\" : \"12245-67890\",\r\n    \"screens\" : [ {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    }, {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    } ],\r\n    \"address1\" : \"100 abc road\",\r\n    \"name\" : \"PVR Cinemas\",\r\n    \"description\" : \"PVR Cinemas in bangalore\",\r\n    \"id\" : 501,\r\n    \"state\" : \"Karnataka\",\r\n    \"category\" : \"Multiplex\"\r\n  },\r\n  \"showTotalPrice\" : 250,\r\n  \"discountedTotalPrice\" : 225,\r\n  \"showTime\" : \"2021-09-17 08:45:00.000\",\r\n  \"cinema\" : {\r\n    \"languages\" : \"English, Hindi\",\r\n    \"name\" : \"Fast and Furious 6\",\r\n    \"castMembers\" : \"Paul Walker, Vin Diesel, Michelle Rodriguez\",\r\n    \"genre\" : \"Action\",\r\n    \"description\" : \"Hobbs is tasked with catching a team of mercenary drivers who manage to evade him every time.\",\r\n    \"id\" : 345,\r\n    \"durationInMins\" : 112\r\n  },\r\n  \"showOffers\" : [ {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  }, {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  } ]\r\n}", Show.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ShowsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get all shows per city", nickname = "showsCityDateGet", notes = "", response = Show.class, tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success output", response = Show.class),
        @ApiResponse(code = 400, message = "Invalid parameters supplied", response = Error.class) })
    @RequestMapping(value = "/shows/{city}/{date}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Show> showsCityDateGet(@ApiParam(value = "City which shows run",required=true) @PathVariable("city") String city
,@ApiParam(value = "Shows for a particular date.",required=true) @PathVariable("date") String date
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"showId\" : 456,\r\n  \"theater\" : {\r\n    \"zip\" : \"560001\",\r\n    \"address2\" : \"R Block\",\r\n    \"city\" : \"Bangalore\",\r\n    \"phone\" : \"12245-67890\",\r\n    \"screens\" : [ {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    }, {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    } ],\r\n    \"address1\" : \"100 abc road\",\r\n    \"name\" : \"PVR Cinemas\",\r\n    \"description\" : \"PVR Cinemas in bangalore\",\r\n    \"id\" : 501,\r\n    \"state\" : \"Karnataka\",\r\n    \"category\" : \"Multiplex\"\r\n  },\r\n  \"showTotalPrice\" : 250,\r\n  \"discountedTotalPrice\" : 225,\r\n  \"showTime\" : \"2021-09-17 08:45:00.000\",\r\n  \"cinema\" : {\r\n    \"languages\" : \"English, Hindi\",\r\n    \"name\" : \"Fast and Furious 6\",\r\n    \"castMembers\" : \"Paul Walker, Vin Diesel, Michelle Rodriguez\",\r\n    \"genre\" : \"Action\",\r\n    \"description\" : \"Hobbs is tasked with catching a team of mercenary drivers who manage to evade him every time.\",\r\n    \"id\" : 345,\r\n    \"durationInMins\" : 112\r\n  },\r\n  \"showOffers\" : [ {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  }, {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  } ]\r\n}", Show.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ShowsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get all shows per city per theater", nickname = "showsCityDateTheaterGet", notes = "", response = Show.class, tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success output", response = Show.class),
        @ApiResponse(code = 400, message = "Invalid parameters supplied", response = Error.class) })
    @RequestMapping(value = "/shows/{city}/{date}/{theater}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Show> showsCityDateTheaterGet(@ApiParam(value = "City which shows run",required=true) @PathVariable("city") String city
,@ApiParam(value = "Shows for a theater",required=true) @PathVariable("theater") String theater
,@ApiParam(value = "Shows for a particular date.",required=true) @PathVariable("date") String date
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"showId\" : 456,\r\n  \"theater\" : {\r\n    \"zip\" : \"560001\",\r\n    \"address2\" : \"R Block\",\r\n    \"city\" : \"Bangalore\",\r\n    \"phone\" : \"12245-67890\",\r\n    \"screens\" : [ {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    }, {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    } ],\r\n    \"address1\" : \"100 abc road\",\r\n    \"name\" : \"PVR Cinemas\",\r\n    \"description\" : \"PVR Cinemas in bangalore\",\r\n    \"id\" : 501,\r\n    \"state\" : \"Karnataka\",\r\n    \"category\" : \"Multiplex\"\r\n  },\r\n  \"showTotalPrice\" : 250,\r\n  \"discountedTotalPrice\" : 225,\r\n  \"showTime\" : \"2021-09-17 08:45:00.000\",\r\n  \"cinema\" : {\r\n    \"languages\" : \"English, Hindi\",\r\n    \"name\" : \"Fast and Furious 6\",\r\n    \"castMembers\" : \"Paul Walker, Vin Diesel, Michelle Rodriguez\",\r\n    \"genre\" : \"Action\",\r\n    \"description\" : \"Hobbs is tasked with catching a team of mercenary drivers who manage to evade him every time.\",\r\n    \"id\" : 345,\r\n    \"durationInMins\" : 112\r\n  },\r\n  \"showOffers\" : [ {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  }, {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  } ]\r\n}", Show.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ShowsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Get all shows per city per language", nickname = "showsCityLanguageGet", notes = "", response = Show.class, tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success output", response = Show.class),
        @ApiResponse(code = 400, message = "Invalid parameters supplied", response = Error.class) })
    @RequestMapping(value = "/shows/{city}/{language}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Show> showsCityLanguageGet(@ApiParam(value = "City which shows run",required=true) @PathVariable("city") String city
,@ApiParam(value = "Shows for a language",required=true) @PathVariable("language") String language
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"showId\" : 456,\r\n  \"theater\" : {\r\n    \"zip\" : \"560001\",\r\n    \"address2\" : \"R Block\",\r\n    \"city\" : \"Bangalore\",\r\n    \"phone\" : \"12245-67890\",\r\n    \"screens\" : [ {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    }, {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    } ],\r\n    \"address1\" : \"100 abc road\",\r\n    \"name\" : \"PVR Cinemas\",\r\n    \"description\" : \"PVR Cinemas in bangalore\",\r\n    \"id\" : 501,\r\n    \"state\" : \"Karnataka\",\r\n    \"category\" : \"Multiplex\"\r\n  },\r\n  \"showTotalPrice\" : 250,\r\n  \"discountedTotalPrice\" : 225,\r\n  \"showTime\" : \"2021-09-17 08:45:00.000\",\r\n  \"cinema\" : {\r\n    \"languages\" : \"English, Hindi\",\r\n    \"name\" : \"Fast and Furious 6\",\r\n    \"castMembers\" : \"Paul Walker, Vin Diesel, Michelle Rodriguez\",\r\n    \"genre\" : \"Action\",\r\n    \"description\" : \"Hobbs is tasked with catching a team of mercenary drivers who manage to evade him every time.\",\r\n    \"id\" : 345,\r\n    \"durationInMins\" : 112\r\n  },\r\n  \"showOffers\" : [ {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  }, {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  } ]\r\n}", Show.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ShowsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update the show details", nickname = "updateShow", notes = "", response = Show.class, tags={ "Shows", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = Show.class),
        @ApiResponse(code = 400, message = "Invalid parameters supplied", response = Error.class) })
    @RequestMapping(value = "/shows/{showId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Show> updateShow(@ApiParam(value = "Show that needs to be updated to the inventory" ,required=true )  @Valid @RequestBody CreateShowRequest body
,@ApiParam(value = "Id of a Show",required=true) @PathVariable("showId") String showId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"showId\" : 456,\r\n  \"theater\" : {\r\n    \"zip\" : \"560001\",\r\n    \"address2\" : \"R Block\",\r\n    \"city\" : \"Bangalore\",\r\n    \"phone\" : \"12245-67890\",\r\n    \"screens\" : [ {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    }, {\r\n      \"seatCapacity\" : 200,\r\n      \"name\" : \"Screen_1\"\r\n    } ],\r\n    \"address1\" : \"100 abc road\",\r\n    \"name\" : \"PVR Cinemas\",\r\n    \"description\" : \"PVR Cinemas in bangalore\",\r\n    \"id\" : 501,\r\n    \"state\" : \"Karnataka\",\r\n    \"category\" : \"Multiplex\"\r\n  },\r\n  \"showTotalPrice\" : 250,\r\n  \"discountedTotalPrice\" : 225,\r\n  \"showTime\" : \"2021-09-17 08:45:00.000\",\r\n  \"cinema\" : {\r\n    \"languages\" : \"English, Hindi\",\r\n    \"name\" : \"Fast and Furious 6\",\r\n    \"castMembers\" : \"Paul Walker, Vin Diesel, Michelle Rodriguez\",\r\n    \"genre\" : \"Action\",\r\n    \"description\" : \"Hobbs is tasked with catching a team of mercenary drivers who manage to evade him every time.\",\r\n    \"id\" : 345,\r\n    \"durationInMins\" : 112\r\n  },\r\n  \"showOffers\" : [ {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  }, {\r\n    \"code\" : \"OFFER-3TICKET\",\r\n    \"description\" : \"50% discount on the third ticket\"\r\n  } ]\r\n}", Show.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ShowsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
